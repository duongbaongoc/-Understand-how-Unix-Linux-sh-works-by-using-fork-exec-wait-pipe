//Author: Ngoc Duong
//Date: 09/19/2018
//This program simulates the Unix sh for command processing

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h> //chdir(), fork()

//function declarations
int prompt_command(char *command, char args[][100]);
void handle_cd(char *path, char *home);
char * find_home(char *env[]);
void handle_other_command();

int main(int argc, char *argv[], char *env[])
{
  char command[20];
  char args[10][100];

  handle_other_command();
  /*int len = prompt_command(command, args);

  char temp[120];
  getcwd(temp, 120);
  puts(temp);
  handle_cd(" ", "/home/ngoc");
  getcwd(temp, 120);
  puts(temp);*/
  return 0;
}

//Part 1: Single Command with I/O Redirection
/******************************************************/

//prompt an input line and return the input
//as a command and a list of arguments
//return the number of arguments
int prompt_command(char *command, char args[][100])
{
  int i = 0;
  char line[128];
  printf("Command: ");
  fgets(line, 128, stdin);

  char *tok = strtok(line, " ");
  if (tok !=NULL)
  {
    strcpy(command, tok);
    tok = strtok(NULL, " ");
    while (tok != NULL)
    {
      strcpy(args[i], tok);
      tok = strtok(NULL, " ");
      i++;
      }
  }
  return i;
}

//Handle command = "cd"
void handle_cd(char *path, char *home)
{
  int ret = 0;
  if (strcmp(path, "") == 0)
    ret = chdir(home);
  else
      ret = chdir(path);
  if (ret==-1)
    printf("Invalid path\n");
}

//find $HOME in the env
char * find_home(char *env[])
{
  int i = 0;
  char *home;
  while (env[i] != NULL)
    {
      if (strncmp(env[i], "HOME=", 5) == 0) //found the HOME
	{
	  home = env[i]+5;
	  break;
	}
      i++;
      }

  if (env[i] == NULL)
    home = "Could not find HOME";
  return home;
}

//handle commands different than "cd" and "exist"
void handle_other_command()
{
  int status = 0;
  int pid = fork();

  if (pid < 0)
  {
    printf("Fold failed\n");
    exit(1);
  }
  else if (pid) //parent's execution
    {
      pid = wait(&status); //wait for a dead child
      printf("Child's exit status code: %d\n", status);
    }
  else //child's execution
    {
      printf("Process the child\n");//child_process(); //implement later
    }
}
